{"version":3,"sources":["img/iss-1.png","img/nasa-alt-logo.png","img/nasa-load-logo2.gif","img/nasa-logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","viewport","width","height","latitude","longitude","zoom","_this","getZoom","iss","lat","long","timestamp","velocity","altitude","windowHeight","undefined","windowWidth","styles","satellite","dark","light","outdoors","streets","chosenStyle","loaded","currentZoom","handleMapStyle","style","newStyle","toLowerCase","setState","handleZoom","_this$state","newZoom","handleResize","_this$state2","window","innerHeight","innerWidth","handleLoad","handleView","_this2","this","interval","setInterval","fetch","then","res","json","data","catch","err","console","log","addEventListener","removeEventListener","clearInterval","_this$state3","react_default","a","createElement","App_Main","App_Loading","Component","Loading","_ref","setTimeout","className","src","NasaLoadLogo","alt","Main","_ref2","App_Dashboard","App_MapInterface","Logo","href","target","NasaAltLogo","MapInterface","_ref3","esm","Object","assign","onViewportChange","mapboxApiAccessToken","mapStyle","offsetLeft","offsetTop","ISS1","Dashboard","_ref4","toString","decimalPosLat","indexOf","decimalPosLong","shortLong","slice","shortLat","App_Logo","App_Measurement","desc","stat","Math","round","unit","App_MapStyleButton","buttonVal","MapStyleButton","_ref5","onClick","Measurement","_ref6","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8f01b28c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/iss-1.93b3c122.png\";","module.exports = __webpack_public_path__ + \"static/media/nasa-alt-logo.da43858e.png\";","module.exports = __webpack_public_path__ + \"static/media/nasa-load-logo2.d65b793c.gif\";","module.exports = __webpack_public_path__ + \"static/media/nasa-logo.6099842f.png\";","import React, { Component } from \"react\"\nimport ReactMapGL, { Marker } from \"react-map-gl\"\nimport \"./App.css\"\nimport \"./media.css\"\nimport ISS1 from \"./img/iss-1.png\"\n// import ISS2 from \"./img/iss-2.png\"\nimport NasaLogo from \"./img/nasa-logo.png\"\nimport NasaAltLogo from \"./img/nasa-alt-logo.png\"\nimport NasaLoadLogo from \"./img/nasa-load-logo2.gif\"\n\nconst MAPBOX_TOKEN =\n  \"pk.eyJ1IjoiYmVubWF1ZHNsYXkiLCJhIjoiY2p0N2RtOHB1MDJzbDN5bzh5c25zaDllZyJ9.D0RtSq3i_afvqrXX2jHFbg\"\n// const ZOOM_LEVEL = 2\n\nclass App extends Component {\n  state = {\n    viewport: {\n      width: \"100%\",\n      height: \"100%\",\n      latitude: 37.7577,\n      longitude: -122.4376,\n      zoom: this.getZoom\n    },\n    iss: {\n      lat: 0,\n      long: 0,\n      timestamp: 0,\n      velocity: 0,\n      altitude: 0\n    },\n    windowHeight: undefined,\n    windowWidth: undefined,\n    styles: {\n      satellite: \"mapbox://styles/mapbox/satellite-v9\",\n      dark: \"mapbox://styles/mapbox/dark-v9\",\n      light: \"mapbox://styles/mapbox/light-v9\",\n      outdoors: \"mapbox://styles/mapbox/outdoors-v10\",\n      streets: \"mapbox://styles/mapbox/streets-v10\"\n    },\n    chosenStyle: \"mapbox://styles/mapbox/streets-v10\",\n    loaded: false,\n    currentZoom: 2\n  }\n\n  getZoom = () => {\n    const { currentZoom } = this.state\n    return currentZoom\n  }\n\n  handleMapStyle = style => {\n    const { styles } = this.state\n    let newStyle\n    switch (style.toLowerCase()) {\n      case \"satellite\":\n        newStyle = styles.satellite\n        break\n      case \"dark\":\n        newStyle = styles.dark\n        break\n      case \"light\":\n        newStyle = styles.light\n        break\n      case \"outdoors\":\n        newStyle = styles.outdoors\n        break\n      case \"streets\":\n        newStyle = styles.streets\n        break\n      default:\n        newStyle = styles.streets\n        break\n    }\n    this.setState({ chosenStyle: newStyle })\n  }\n\n  handleZoom = () => {\n    const { currentZoom, viewport } = this.state\n    const newZoom = viewport.zoom\n    currentZoom !== newZoom && this.setState({ currentZoom: newZoom })\n  }\n\n  handleResize = () => {\n    const { iss, currentZoom } = this.state\n    this.setState({\n      viewport: {\n        width: \"100%\",\n        height: \"100%\",\n        latitude: iss.lat,\n        longitude: iss.long,\n        zoom: currentZoom\n      },\n      windowHeight: window.innerHeight,\n      windowWidth: window.innerWidth\n    })\n  }\n\n  handleLoad = () => this.setState({ loaded: true })\n\n  handleView = viewport => this.setState({ viewport })\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      const { currentZoom } = this.state\n\n      fetch(\"https://api.wheretheiss.at/v1/satellites/25544\")\n        .then(res => res.json())\n        .then(data => {\n          this.setState({\n            iss: {\n              lat: data.latitude,\n              long: data.longitude,\n              timestamp: data.timestamp,\n              velocity: data.velocity,\n              altitude: data.altitude\n            },\n            viewport: {\n              height: \"100%\",\n              width: \"100%\",\n              latitude: data.latitude,\n              longitude: data.longitude,\n              zoom: currentZoom\n            }\n          })\n        })\n        .catch(err => console.log(err))\n    }, 3000)\n\n    this.handleResize()\n    window.addEventListener(\"resize\", this.handleResize)\n  }\n\n  componentDidUpdate() {\n    this.handleZoom()\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize)\n    clearInterval(this.interval)\n  }\n\n  render() {\n    const { viewport, iss, chosenStyle, loaded } = this.state\n    return (\n      <div>\n        {loaded && iss.lat && iss.long !== 0 ? (\n          <Main\n            iss={iss}\n            viewport={viewport}\n            chosenStyle={chosenStyle}\n            handleView={this.handleView}\n            handleMapStyle={this.handleMapStyle}\n          />\n        ) : (\n          <Loading handleLoad={this.handleLoad} />\n        )}\n      </div>\n    )\n  }\n}\n\nconst Loading = ({ handleLoad }) => {\n  setTimeout(() => handleLoad(), 2000)\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <img className=\"App-logo\" src={NasaLoadLogo} alt=\"Nasa\" />\n        Loading...\n      </div>\n    </div>\n  )\n}\n\nconst Main = ({ iss, viewport, chosenStyle, handleView, handleMapStyle }) => {\n  return (\n    <div className=\"container\">\n      <div className=\"sidebar\">\n        <Dashboard handleMapStyle={handleMapStyle} iss={iss} />\n      </div>\n      <div className=\"main\">\n        <MapInterface\n          iss={iss}\n          viewport={viewport}\n          chosenStyle={chosenStyle}\n          handleView={handleView}\n        />\n      </div>\n    </div>\n  )\n}\n\nconst Logo = () => (\n  <a href=\"https://www.nasa.gov/\" target=\"_blank\" className=\"wrapperLink\">\n    <div className=\"logoWrapper\" href=\"https://www.nasa.gov/\">\n      <img src={NasaAltLogo} alt=\"NASA\" className=\"altLogo\" />\n      <div className=\"logoText\">\n        <span>\n          <span>INTERNATIONAL </span>SPACE STATION\n        </span>\n      </div>\n    </div>\n  </a>\n)\n\nconst MapInterface = ({ viewport, chosenStyle, iss, handleView }) => {\n  return (\n    <ReactMapGL\n      {...viewport}\n      onViewportChange={viewport => handleView(viewport)}\n      mapboxApiAccessToken={MAPBOX_TOKEN}\n      mapStyle={chosenStyle}\n    >\n      <Marker\n        latitude={iss.lat}\n        longitude={iss.long}\n        offsetLeft={0}\n        offsetTop={0}\n      >\n        <div className=\"spaceStationContainer\">\n          <div className=\"littleRedDot\" />\n          <img className=\"spaceStation\" alt=\"Space Station\" src={ISS1} />\n        </div>\n      </Marker>\n    </ReactMapGL>\n  )\n}\n\nconst Dashboard = ({ handleMapStyle, iss }) => {\n  let searchTerm = \".\",\n    long = iss.long.toString(),\n    lat = iss.lat.toString(),\n    decimalPosLat = lat.indexOf(searchTerm) + 7,\n    decimalPosLong = long.indexOf(searchTerm) + 7,\n    shortLong = long.slice(0, decimalPosLong),\n    shortLat = lat.slice(0, decimalPosLat)\n\n  return (\n    <div className=\"dashboard\">\n      <Logo />\n      <div className=\"dashContent\">\n        <div className=\"measures\">\n          <Measurement desc=\"Latitude\" stat={shortLat} />\n          <Measurement desc=\"Longitude\" stat={shortLong} />\n          <Measurement\n            desc=\"Velocity\"\n            stat={Math.round(iss.velocity)}\n            unit=\"km/s\"\n          />\n          <Measurement\n            desc=\"Altitude\"\n            stat={Math.round(iss.altitude)}\n            unit=\"km\"\n          />\n        </div>\n        <div className=\"buttonContainer\">\n          <div className=\"styleButtons\">\n            <p className=\"buttonHeader\">Map style:</p>\n            <MapStyleButton\n              handleMapStyle={handleMapStyle}\n              buttonVal=\"Satellite\"\n            />\n            <MapStyleButton handleMapStyle={handleMapStyle} buttonVal=\"Dark\" />\n            <MapStyleButton handleMapStyle={handleMapStyle} buttonVal=\"Light\" />\n            <MapStyleButton\n              handleMapStyle={handleMapStyle}\n              buttonVal=\"Outdoors\"\n            />\n            <MapStyleButton\n              handleMapStyle={handleMapStyle}\n              buttonVal=\"Streets\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst MapStyleButton = ({ handleMapStyle, buttonVal }) => (\n  <button onClick={() => handleMapStyle(buttonVal)}>{buttonVal}</button>\n)\n\nconst Measurement = ({ desc, stat, unit }) => (\n  <div className=\"measurementWrapper\">\n    <li className=\"measurementItem\">\n      <span>{desc}: </span>\n      <span className=\"measurementStat\">\n        {stat} {unit && unit}\n      </span>\n    </li>\n    <div className=\"listLine\" />\n  </div>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}